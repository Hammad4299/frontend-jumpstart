//Need for es6 and then es6 to es5 because of
//https://www.reddit.com/r/typescript/comments/4fuo7v/is_it_possible_to_typescriptes6babeles5/
//#Awesome
{
  "compilerOptions": {
    "sourceMap": true,
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
	"resolveJsonModule":true,
    // Don't emit; allow Babel to transform files.
    "noEmit": true,
    "isolatedModules": true,
    "noImplicitAny": false,
    "module": "esnext",        //to es6 modules. So, webpack can handle it after passing through babel
    "target": "esnext",
    //default was (module === "AMD" or "System" or "ES6" ? "Classic" : "Node").
    //Since for ModuleConcatenationPlugin, we changed module from "commonjs" to "es6", this reverted to "Node".
    //For previous behaviour, it needs to be node again.
    "baseUrl": "./",
    "paths": {
      "models": ["src/js/models/index.ts"],
      "viewmodels": ["src/js/viewmodels/index.ts"],
      "types": ["src/js/types/index.ts"],
      "services": ["src/js/services/index.ts"],
      "redux-store": ["src/js/redux-store/index.ts"],
      "breadcrumbs": ["src/js/breadcrumbs/index.ts"],
      "routing": ["src/js/routing/index.ts"],
      "typehelper": ["src/js/typescript/index.ts"],
      "externals/*": ["src/js/externals/*"],
      "shared": ["src/js/shared/index.ts"]
    },
    "typeRoots": [
      "./node_modules/types-redux-orm",
      "./node_modules/@types"
    ],
    "moduleResolution": "node",
    "jsx": "preserve",      //let babel do it
    "allowJs": true         //Necessary. To run js files as typescript,
  },
  "include": [
    "./src/**/*.ts",
    "./src/**/*.tsx"
  ],
  "awesomeTypescriptLoaderOptions": { //Not in use anymore since ts-loader is being used
    "useCache": true,
    "useBabel": true
  }
}